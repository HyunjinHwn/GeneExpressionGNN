{
  "task": "SwinIR"     //  Task name. Also used as a directory name for output files. (ex: path/root/SwinIR/*)
  , "model": "plain" // "plain" | "plain2" if two inputs
  , "gpu_ids": [0]	// gpu id should be [0], since only one GPU exists in Google Colab session
  , "dist": false

  , "scale": 4       // supported: 2 | 3 | 4 | 8
  , "n_channels": 1  // broadcast to "datasets", 1 for grayscale, 3 for color (RGB). For SwinIR-inference, use 1.

  , "path": {
    "root": "/content/drive/MyDrive/Harim/1201" // All outputs (including model, log and test images) are stored here. Set the root directory in the mounted Google Drive (default: /content/drive/MyDrive/*), since Colab local storage is formatted when session is disconnected.
    , "pretrained_netG": null      // path of pretrained model. Usually not used
    , "pretrained_netE": null      // path of pretrained model. Usually not used
    , "pretrained_optimizerG": null
  }

  , "datasets": {
    "train": {
      "name": "train_dataset"           // just name
      , "dataset_type": "sr"         // "sr" for superresolution task dataset
      , "dataroot_H": "/content/RNAseq/train"        // path of H training dataset (RNAseq/train)
      , "dataroot_L": "/content/L1000/train"        // path of L training dataset (L1000/train)

      , "H_size": 96                   // 96/144|192/384 | 128/192/256/512. LR patch size is set to 48 or 64 when compared with RCAN or RRDB.

      , "dataloader_shuffle": true
      , "dataloader_num_workers": 2
      , "dataloader_batch_size": 32      // batch size 1 | 16 | 32 | 48 | 64 | 128. Total batch size =4x8=32 in SwinIR
    }
    , "test": {
      "name": "test_dataset"            // just name
      , "dataset_type": "sr"         // "sr" for superresolution task / "dncnn" | "dnpatch" | "fdncnn" | "ffdnet" | "sr" | "srmd" | "dpsr" | "plain" | "plainpatch" | "jpeg"
      , "dataroot_H": "/content/RNAseq/valid"  // path of H testing dataset (RNAseq/valid)
      , "dataroot_L": "/content/L1000/valid"  // path of L testing dataset (L1000/valid)
    }
  }

  , "netG": {
    "net_type": "swinir" 
    , "upscale": 4         // same as above / 2 | 3 | 4 | 8
    , "in_chans": 1        // same as above / 1(grayscale) or 3(color)
    , "img_size": 24       // We set the img size to 24 (SwinIR default: 48) since our low-resolution image size (27x36 pixels) is relatively small compared to those used for original SwinIR-superresolution task
    , "window_size": 4     //   and the window size to 4 (SwinIR default: 8) 
    , "img_range": 1.0 
    , "depths": [6, 6, 6, 6, 6, 6]   
    , "embed_dim": 180     
    , "num_heads": [6, 6, 6, 6, 6, 6]
    , "mlp_ratio": 2 
    , "upsampler": "pixelshuffle"        // "pixelshuffle" | "pixelshuffledirect" | "nearest+conv" | null
    , "resi_connection": "1conv"        // "1conv" | "3conv"
    , "init_type": "default"
  }

  , "train": {
    "G_lossfn_type": "l1"               // Loss function. "l1" preferred | "l2sum" | "l2" | "ssim" | "charbonnier"
    , "G_lossfn_weight": 1.0            // default

    , "E_decay": 0.999                  // Exponential Moving Average for netG: set 0 to disable; default setting 0.999

    , "G_optimizer_type": "adam"        // fixed, adam is enough
    , "G_optimizer_lr": 2e-4            // learning rate
    , "G_optimizer_wd": 0               // weight decay, default 0
    , "G_optimizer_clipgrad": null      // unused
    , "G_optimizer_reuse": true         // 

    , "G_scheduler_type": "MultiStepLR" // "MultiStepLR" is enough
    , "G_scheduler_milestones": [250000, 400000, 450000, 475000, 500000]
    , "G_scheduler_gamma": 0.5          // "MultiStepLR" scheduler diminishes the learning rate by the ratio designated by gamma when the training iteration reaches the milestones

    , "G_regularizer_orthstep": null    // unused
    , "G_regularizer_clipstep": null    // unused

    , "G_param_strict": true
    , "E_param_strict": true

    , "checkpoint_test": 5000           // for testing
    , "checkpoint_save": 5000           // for saving model
    , "checkpoint_print": 1000          // for print and logging
  }
}
